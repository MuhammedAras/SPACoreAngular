/*
 * BiMasa Backend APIs
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductUpdateRequest : IEquatable<ProductUpdateRequest>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageData
        /// </summary>
        [DataMember(Name="imageData")]
        public string ImageData { get; set; }

        /// <summary>
        /// Gets or Sets CategoryId
        /// </summary>
        [DataMember(Name="categoryId")]
        public Guid? CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets IsSubProduct
        /// </summary>
        [DataMember(Name="isSubProduct")]
        public bool? IsSubProduct { get; set; }

        /// <summary>
        /// Gets or Sets IsDiscounted
        /// </summary>
        [DataMember(Name="isDiscounted")]
        public bool? IsDiscounted { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price")]
        public double? Price { get; set; }

        /// <summary>
        /// Gets or Sets DiscountedPrice
        /// </summary>
        [DataMember(Name="discountedPrice")]
        public double? DiscountedPrice { get; set; }

        /// <summary>
        /// Gets or Sets ProductTranslations
        /// </summary>
        [DataMember(Name="productTranslations")]
        public List<ProductTranslationDTO> ProductTranslations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductUpdateRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageData: ").Append(ImageData).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  IsSubProduct: ").Append(IsSubProduct).Append("\n");
            sb.Append("  IsDiscounted: ").Append(IsDiscounted).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  DiscountedPrice: ").Append(DiscountedPrice).Append("\n");
            sb.Append("  ProductTranslations: ").Append(ProductTranslations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductUpdateRequest)obj);
        }

        /// <summary>
        /// Returns true if ProductUpdateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductUpdateRequest other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ImageData == other.ImageData ||
                    ImageData != null &&
                    ImageData.Equals(other.ImageData)
                ) && 
                (
                    CategoryId == other.CategoryId ||
                    CategoryId != null &&
                    CategoryId.Equals(other.CategoryId)
                ) && 
                (
                    IsSubProduct == other.IsSubProduct ||
                    IsSubProduct != null &&
                    IsSubProduct.Equals(other.IsSubProduct)
                ) && 
                (
                    IsDiscounted == other.IsDiscounted ||
                    IsDiscounted != null &&
                    IsDiscounted.Equals(other.IsDiscounted)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    DiscountedPrice == other.DiscountedPrice ||
                    DiscountedPrice != null &&
                    DiscountedPrice.Equals(other.DiscountedPrice)
                ) && 
                (
                    ProductTranslations == other.ProductTranslations ||
                    ProductTranslations != null &&
                    ProductTranslations.SequenceEqual(other.ProductTranslations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ImageData != null)
                    hashCode = hashCode * 59 + ImageData.GetHashCode();
                    if (CategoryId != null)
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (IsSubProduct != null)
                    hashCode = hashCode * 59 + IsSubProduct.GetHashCode();
                    if (IsDiscounted != null)
                    hashCode = hashCode * 59 + IsDiscounted.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (DiscountedPrice != null)
                    hashCode = hashCode * 59 + DiscountedPrice.GetHashCode();
                    if (ProductTranslations != null)
                    hashCode = hashCode * 59 + ProductTranslations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductUpdateRequest left, ProductUpdateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductUpdateRequest left, ProductUpdateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
